Index: src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java
===================================================================
--- src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java	(révision 709181)
+++ src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java	(copie de travail)
@@ -40,6 +40,7 @@
 import org.apache.ivy.core.module.descriptor.DefaultIncludeRule;
 import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
 import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;
+import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
 import org.apache.ivy.core.module.descriptor.ExcludeRule;
 import org.apache.ivy.core.module.descriptor.IncludeRule;
 import org.apache.ivy.core.module.descriptor.License;
@@ -49,15 +50,21 @@
 import org.apache.ivy.core.module.id.ArtifactId;
 import org.apache.ivy.core.module.id.ModuleId;
 import org.apache.ivy.core.module.id.ModuleRevisionId;
+import org.apache.ivy.core.resolve.ResolveData;
+import org.apache.ivy.core.resolve.ResolveEngine;
+import org.apache.ivy.core.resolve.ResolveOptions;
+import org.apache.ivy.core.resolve.ResolvedModuleRevision;
 import org.apache.ivy.plugins.conflict.ConflictManager;
 import org.apache.ivy.plugins.conflict.FixedConflictManager;
 import org.apache.ivy.plugins.matcher.PatternMatcher;
 import org.apache.ivy.plugins.namespace.Namespace;
 import org.apache.ivy.plugins.parser.AbstractModuleDescriptorParser;
 import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
+import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
 import org.apache.ivy.plugins.parser.ParserSettings;
 import org.apache.ivy.plugins.repository.Resource;
 import org.apache.ivy.plugins.repository.url.URLResource;
+import org.apache.ivy.plugins.resolver.DependencyResolver;
 import org.apache.ivy.util.Message;
 import org.apache.ivy.util.XMLHelper;
 import org.apache.ivy.util.extendable.ExtendableItemHelper;
@@ -211,6 +218,7 @@
         private StringBuffer buffer;
         private String descriptorVersion;
         private String[] publicationsDefaultConf;
+
         
         public Parser(ModuleDescriptorParser parser, ParserSettings ivySettings) {
             super(parser);
@@ -276,6 +284,8 @@
                     ivyModuleStarted(attributes);
                 } else if ("info".equals(qName)) {
                     infoStarted(attributes);
+                } else if (state == State.INFO && "extends".equals(qName)) {
+                    extendsStarted(attributes);
                 } else if (state == State.INFO && "license".equals(qName)) {
                     getMd().addLicense(new License(settings.substitute(attributes.getValue("name")),
                                         settings.substitute(attributes.getValue("url"))));
@@ -340,7 +350,148 @@
                 throw sax;
             }
         }
+        
+        protected String getDefaultParentLocation() {
+            return "../ivy.xml";
+        }
+        
+        protected void extendsStarted(Attributes attributes) throws ParseException {
+            String parentOrganisation = attributes.getValue("organisation");
+            String parentModule = attributes.getValue("name");
+            String parentRevision = attributes.getValue("revision");
+            String location = attributes.getValue("location") != null ? attributes
+                    .getValue("location") : getDefaultParentLocation();
+            ModuleDescriptor parent = null;
 
+            String extendType = attributes.getValue("extendType") != null ? attributes.getValue(
+                "extendType").toLowerCase() : "all";
+
+            List/* <String> */extendTypes = Arrays.asList(extendType.split(","));
+
+            
+            try {
+                Message.debug("Trying to parse included ivy file :" + location);
+                parent = parseOtherIvyFileOnFileSystem(location);
+            } catch (ParseException e) {
+                Message.warn("Unable to parse included ivy file : " + location);
+            } catch (IOException e) {
+                Message.warn("Unable to parse included ivy file : " + location);
+            }
+
+            // if the included ivy file is not found on file system, tries to resolve using
+            // repositories
+            if (parent == null) {
+                try {
+                    Message
+                            .debug("Trying to parse included ivy file by asking repository for module :"
+                                    + parentOrganisation
+                                    + "#"
+                                    + parentModule
+                                    + ";"
+                                    + parentRevision);
+                    parent = parseOtherIvyFile(parentOrganisation, parentModule, parentRevision);
+                } catch (ParseException e) {
+                    Message.warn("Unable to parse included ivy file for " + parentOrganisation
+                            + "#" + parentModule + ";" + parentRevision);
+                }
+            }
+
+            if (parent == null) {
+                throw new ParseException("Unable to parse included ivy file for "
+                        + parentOrganisation + "#" + parentModule + ";" + parentRevision, 0);
+            }
+            mergeWithOtherModuleDescriptor(extendTypes,parent);
+        }
+        
+        protected void mergeWithOtherModuleDescriptor(List/*<String>*/ extendTypes,ModuleDescriptor parent) {
+            if (extendTypes.contains("all")) {
+                mergeAll(parent);
+            } else {
+                if (extendTypes.contains("configurations")) {
+                    mergeConfigurations(parent.getConfigurations());
+                }
+
+                if (extendTypes.contains("dependencies")) {
+                    mergeDependencies(parent.getDependencies());
+                }
+
+                if (extendTypes.contains("description")) {
+                    mergeDescription(parent.getDescription());
+                }
+            }
+            
+        }
+        
+        protected void mergeAll(ModuleDescriptor parent) {
+            mergeConfigurations(parent.getConfigurations());
+            mergeDependencies(parent.getDependencies());
+            mergeDescription(parent.getDescription());
+        }
+
+        protected void mergeConfigurations(Configuration[] configurations) {
+            for (int i = 0; i < configurations.length; i++) {
+                Configuration configuration = configurations[i];
+                Message.debug("Merging configuration with: " + configuration.getName());
+                // TODO: Here we need to merge configuration
+                getMd().addConfiguration(configuration);
+            }
+        }
+
+        protected void mergeDependencies(DependencyDescriptor[] dependencies) {
+            for (int i = 0; i < dependencies.length; i++) {
+                DependencyDescriptor dependencyDescriptor = dependencies[i];
+                Message.debug("Merging dependency with: "
+                        + dependencyDescriptor.getDependencyRevisionId().toString());
+                // TODO: Here we need to merge dependencies
+                getMd().addDependency(dependencyDescriptor);
+            }
+        }
+        
+        protected void mergeDescription(String description) {
+            if (getMd().getDescription() == null)
+                getMd().setDescription(description);
+        }
+
+        protected ModuleDescriptor parseOtherIvyFileOnFileSystem(String location)
+                throws ParseException, IOException {
+            URL url = null;
+            ModuleDescriptor parent = null;
+            url = getSettings().getRelativeUrlResolver().getURL(descriptorURL, location);
+            Message.debug("Trying to load included ivy file from " + url.toString());
+            URLResource res = new URLResource(url);
+            ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser(
+                res);
+
+            parent = parser.parseDescriptor(getSettings(), url, isValidate());
+            return parent;
+        }
+
+        protected ModuleDescriptor parseOtherIvyFile(String parentOrganisation,
+                String parentModule, String parentRevision) throws ParseException {
+            ModuleId parentModuleId = new ModuleId(parentOrganisation, parentModule);
+            ModuleRevisionId parentMrid = new ModuleRevisionId(parentModuleId, parentRevision);
+            DependencyDescriptor dd = new DefaultDependencyDescriptor(parentMrid, true);
+            ResolveData data = IvyContext.getContext().getResolveData();
+            if (data == null) {
+                ResolveEngine engine = IvyContext.getContext().getIvy().getResolveEngine();
+                ResolveOptions options = new ResolveOptions();
+                options.setDownload(false);
+                data = new ResolveData(engine, options);
+            }
+
+            DependencyResolver resolver = getSettings().getResolver(parentMrid);
+            if (resolver == null) {
+                // TODO: Throw exception here?
+                return null;
+            } else {
+                ResolvedModuleRevision otherModule = resolver.getDependency(dd, data);
+                if (otherModule == null)
+                    throw new ParseException("Unable to find " + parentMrid.toString(), 0);
+                return otherModule.getDescriptor();
+            }
+
+        }
+
         protected void publicationsStarted(Attributes attributes) {
             state = State.PUB;
             artifactsDeclared = true;
Index: src/java/org/apache/ivy/plugins/parser/xml/ivy.xsd
===================================================================
--- src/java/org/apache/ivy/plugins/parser/xml/ivy.xsd	(révision 709181)
+++ src/java/org/apache/ivy/plugins/parser/xml/ivy.xsd	(copie de travail)
@@ -60,6 +60,15 @@
   		    <xs:element name="info">
             	<xs:complexType>
 			        <xs:sequence>
+			        	<xs:element name="extends" minOccurs="0" maxOccurs="unbounded">
+			        		<xs:complexType>
+			        			<xs:attribute name="organisation" type="xs:string" use="required"/>
+			        			<xs:attribute name="name" type="xs:string" use="required"/>
+			        			<xs:attribute name="revision" type="xs:string" use="required"/>
+			        			<xs:attribute name="location" type="xs:string" />
+			        			<xs:attribute name="extendType" type="xs:string" />
+			        		</xs:complexType>
+			        	</xs:element>
 			      		<xs:element name="license" minOccurs="0" maxOccurs="unbounded">
 			            	<xs:complexType>
 					            <xs:attribute name="name" type="xs:string" use="required"/>
