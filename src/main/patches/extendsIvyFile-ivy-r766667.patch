Index: src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java
===================================================================
--- src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java	(r√©vision 772962)
+++ src/java/org/apache/ivy/plugins/parser/xml/XmlModuleDescriptorParser.java	(copie de travail)
@@ -31,6 +31,7 @@
 
 import org.apache.ivy.Ivy;
 import org.apache.ivy.core.IvyContext;
+import org.apache.ivy.core.cache.ResolutionCacheManager;
 import org.apache.ivy.core.module.descriptor.Configuration;
 import org.apache.ivy.core.module.descriptor.ConfigurationAware;
 import org.apache.ivy.core.module.descriptor.DefaultArtifact;
@@ -40,6 +41,7 @@
 import org.apache.ivy.core.module.descriptor.DefaultIncludeRule;
 import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor;
 import org.apache.ivy.core.module.descriptor.DependencyArtifactDescriptor;
+import org.apache.ivy.core.module.descriptor.DependencyDescriptor;
 import org.apache.ivy.core.module.descriptor.ExcludeRule;
 import org.apache.ivy.core.module.descriptor.IncludeRule;
 import org.apache.ivy.core.module.descriptor.License;
@@ -49,15 +51,23 @@
 import org.apache.ivy.core.module.id.ArtifactId;
 import org.apache.ivy.core.module.id.ModuleId;
 import org.apache.ivy.core.module.id.ModuleRevisionId;
+import org.apache.ivy.core.resolve.ResolveData;
+import org.apache.ivy.core.resolve.ResolveEngine;
+import org.apache.ivy.core.resolve.ResolveOptions;
+import org.apache.ivy.core.resolve.ResolvedModuleRevision;
 import org.apache.ivy.plugins.conflict.ConflictManager;
 import org.apache.ivy.plugins.conflict.FixedConflictManager;
 import org.apache.ivy.plugins.matcher.PatternMatcher;
 import org.apache.ivy.plugins.namespace.Namespace;
 import org.apache.ivy.plugins.parser.AbstractModuleDescriptorParser;
 import org.apache.ivy.plugins.parser.ModuleDescriptorParser;
+import org.apache.ivy.plugins.parser.ModuleDescriptorParserRegistry;
 import org.apache.ivy.plugins.parser.ParserSettings;
 import org.apache.ivy.plugins.repository.Resource;
 import org.apache.ivy.plugins.repository.url.URLResource;
+import org.apache.ivy.plugins.resolver.CacheResolver;
+import org.apache.ivy.plugins.resolver.DependencyResolver;
+import org.apache.ivy.plugins.resolver.util.ResolvedResource;
 import org.apache.ivy.util.Message;
 import org.apache.ivy.util.XMLHelper;
 import org.apache.ivy.util.extendable.ExtendableItemHelper;
@@ -139,14 +149,10 @@
                 DefaultModuleDescriptor dmd = (DefaultModuleDescriptor) md;
                 ns = dmd.getNamespace();
             }
-            XmlModuleDescriptorUpdater.update(is, res, destFile, 
-                    new UpdateOptions()
-                        .setSettings(IvyContext.getContext().getSettings())
-                        .setStatus(md.getStatus()) 
-                        .setRevision(md.getResolvedModuleRevisionId().getRevision()) 
-                        .setPubdate(md.getResolvedPublicationDate())
-                        .setUpdateBranch(false)
-                        .setNamespace(ns));
+            XmlModuleDescriptorUpdater.update(is, res, destFile, new UpdateOptions().setSettings(
+                IvyContext.getContext().getSettings()).setStatus(md.getStatus()).setRevision(
+                md.getResolvedModuleRevisionId().getRevision()).setPubdate(
+                md.getResolvedPublicationDate()).setUpdateBranch(false).setNamespace(ns));
         } catch (SAXException e) {
             ParseException ex = new ParseException("exception occured while parsing " + res, 0);
             ex.initCause(e);
@@ -181,37 +187,48 @@
             public static final int EXCLUDE = 9;
 
             public static final int DEPS = 10;
-        
+
             public static final int DESCRIPTION = 11;
 
             public static final int EXTRA_INFO = 12;
-            
+
             private State() {
             }
         }
 
-        protected static final List ALLOWED_VERSIONS = Arrays.asList(
-            new String[] {"1.0", "1.1", "1.2", "1.3", "1.4", "2.0"});
+        protected static final List ALLOWED_VERSIONS = Arrays.asList(new String[] {"1.0", "1.1",
+                "1.2", "1.3", "1.4", "2.0"});
 
         /* how and what do we have to parse */
         private ParserSettings settings;
+
         private boolean validate = true;
+
         private URL descriptorURL;
+
         private InputStream descriptorInput;
 
-
         /* Parsing state */
         private int state = State.NONE;
+
         private PatternMatcher defaultMatcher;
+
         private DefaultDependencyDescriptor dd;
+
         private ConfigurationAware confAware;
+
         private MDArtifact artifact;
+
         private String conf;
+
         private boolean artifactsDeclared = false;
+
         private StringBuffer buffer;
+
         private String descriptorVersion;
+
         private String[] publicationsDefaultConf;
-        
+
         public Parser(ModuleDescriptorParser parser, ParserSettings ivySettings) {
             super(parser);
             settings = ivySettings;
@@ -229,8 +246,7 @@
             this.validate = validate;
         }
 
-        public void parse() throws ParseException,
-                IOException {
+        public void parse() throws ParseException, IOException {
             try {
                 URL schemaURL = validate ? getSchemaURL() : null;
                 if (descriptorURL != null) {
@@ -241,14 +257,15 @@
                 checkConfigurations();
                 replaceConfigurationWildcards();
                 getMd().setModuleArtifact(
-                    DefaultArtifact.newIvyArtifact(
-                        getMd().getResolvedModuleRevisionId(), getMd().getPublicationDate()));
+                    DefaultArtifact.newIvyArtifact(getMd().getResolvedModuleRevisionId(), getMd()
+                            .getPublicationDate()));
                 if (!artifactsDeclared) {
                     String[] confs = getMd().getConfigurationsNames();
                     for (int i = 0; i < confs.length; i++) {
-                        getMd().addArtifact(confs[i], 
-                            new MDArtifact(getMd(), getMd().getModuleRevisionId().getName(), 
-                                "jar", "jar"));
+                        getMd().addArtifact(
+                            confs[i],
+                            new MDArtifact(getMd(), getMd().getModuleRevisionId().getName(), "jar",
+                                    "jar"));
                     }
                 }
                 getMd().check();
@@ -269,16 +286,19 @@
                 throws SAXException {
             try {
                 if (state == State.DESCRIPTION) {
-                    //make sure we don't interpret any tag while in description tag 
+                    // make sure we don't interpret any tag while in description tag
                     buffer.append("<" + qName + ">");
                     return;
                 } else if ("ivy-module".equals(qName)) {
                     ivyModuleStarted(attributes);
                 } else if ("info".equals(qName)) {
                     infoStarted(attributes);
+                } else if (state == State.INFO && "extends".equals(qName)) {
+                    extendsStarted(attributes);
                 } else if (state == State.INFO && "license".equals(qName)) {
-                    getMd().addLicense(new License(settings.substitute(attributes.getValue("name")),
-                                        settings.substitute(attributes.getValue("url"))));
+                    getMd().addLicense(
+                        new License(settings.substitute(attributes.getValue("name")), settings
+                                .substitute(attributes.getValue("url"))));
                 } else if (state == State.INFO && "description".equals(qName)) {
                     getMd().setHomePage(settings.substitute(attributes.getValue("homepage")));
                     state = State.DESCRIPTION;
@@ -299,7 +319,8 @@
                 } else if ("conflicts".equals(qName)) {
                     if (!descriptorVersion.startsWith("1.")) {
                         Message.deprecated("using conflicts section is deprecated: "
-                            + "please use hints section instead. Ivy file URL: " + descriptorURL);
+                                + "please use hints section instead. Ivy file URL: "
+                                + descriptorURL);
                     }
                     state = State.CONFLICT;
                     checkConfigurations();
@@ -341,6 +362,185 @@
             }
         }
 
+        protected String getDefaultParentLocation() {
+            return "../ivy.xml";
+        }
+
+        protected void extendsStarted(Attributes attributes) throws ParseException {
+            String parentOrganisation = attributes.getValue("organisation");
+            String parentModule = attributes.getValue("name");
+            String parentRevision = attributes.getValue("revision");
+            String location = attributes.getValue("location") != null ? attributes
+                    .getValue("location") : getDefaultParentLocation();
+            ModuleDescriptor parent = null;
+
+            String extendType = attributes.getValue("extendType") != null ? attributes.getValue(
+                "extendType").toLowerCase() : "all";
+
+            List/* <String> */extendTypes = Arrays.asList(extendType.split(","));
+
+            try {
+                Message.debug("Trying to parse included ivy file :" + location);
+                parent = parseOtherIvyFileOnFileSystem(location);
+            } catch (ParseException e) {
+                Message.warn("Unable to parse included ivy file : " + location);
+            } catch (IOException e) {
+                Message.warn("Unable to parse included ivy file : " + location);
+            }
+
+            // if the included ivy file is not found on file system, tries to resolve using
+            // repositories
+            if (parent == null) {
+                try {
+                    Message
+                            .debug("Trying to parse included ivy file by asking repository for module :"
+                                    + parentOrganisation
+                                    + "#"
+                                    + parentModule
+                                    + ";"
+                                    + parentRevision);
+                    parent = parseOtherIvyFile(parentOrganisation, parentModule, parentRevision);
+                } catch (ParseException e) {
+                    Message.warn("Unable to parse included ivy file for " + parentOrganisation
+                            + "#" + parentModule + ";" + parentRevision);
+                }
+            }
+
+            if (parent == null) {
+                throw new ParseException("Unable to parse included ivy file for "
+                        + parentOrganisation + "#" + parentModule + ";" + parentRevision, 0);
+            }
+
+            ResolutionCacheManager cacheManager = settings.getResolutionCacheManager();
+
+            File ivyFileInCache = cacheManager.getResolvedIvyFileInCache(parent
+                    .getResolvedModuleRevisionId());
+            //Generate the parent cache file if necessary
+            if (parent.getResource() != null
+                    && !parent.getResource().getName().equals(ivyFileInCache.toURI().toString())) {
+                try {
+                    parent.toIvyFile(ivyFileInCache);
+                } catch (ParseException e) {
+                    throw new ParseException("Unable to create cache file for "
+                            + parentOrganisation + "#" + parentModule + ";" + parentRevision
+                            + " Reason:" + e.getLocalizedMessage(), 0);
+                } catch (IOException e) {
+                    throw new ParseException("Unable to create cache file for "
+                            + parentOrganisation + "#" + parentModule + ";" + parentRevision
+                            + " Reason :" + e.getLocalizedMessage(), 0);
+                }
+            }
+            mergeWithOtherModuleDescriptor(extendTypes, parent);
+        }
+
+        protected void mergeWithOtherModuleDescriptor(List/* <String> */extendTypes,
+                ModuleDescriptor parent) {
+
+            if (extendTypes.contains("all")) {
+                mergeAll(parent);
+            } else {
+                if (extendTypes.contains("configurations")) {
+                    mergeConfigurations(parent.getConfigurations());
+                }
+
+                if (extendTypes.contains("dependencies")) {
+                    mergeDependencies(parent.getDependencies());
+                }
+
+                if (extendTypes.contains("description")) {
+                    mergeDescription(parent.getDescription());
+                }
+            }
+
+        }
+
+        protected void mergeAll(ModuleDescriptor parent) {
+            mergeConfigurations(parent.getConfigurations());
+            mergeDependencies(parent.getDependencies());
+            mergeDescription(parent.getDescription());
+        }
+
+        protected void mergeConfigurations(Configuration[] configurations) {
+            for (int i = 0; i < configurations.length; i++) {
+                Configuration configuration = configurations[i];
+                Message.debug("Merging configuration with: " + configuration.getName());
+                // TODO: Here we need to merge configuration
+                getMd().addConfiguration(configuration);
+            }
+        }
+
+        protected void mergeDependencies(DependencyDescriptor[] dependencies) {
+            for (int i = 0; i < dependencies.length; i++) {
+                DependencyDescriptor dependencyDescriptor = dependencies[i];
+                Message.debug("Merging dependency with: "
+                        + dependencyDescriptor.getDependencyRevisionId().toString());
+                // TODO: Here we need to merge dependencies
+                getMd().addDependency(dependencyDescriptor);
+            }
+        }
+
+        protected void mergeDescription(String description) {
+            if (getMd().getDescription() == null)
+                getMd().setDescription(description);
+        }
+
+        protected ModuleDescriptor parseOtherIvyFileOnFileSystem(String location)
+                throws ParseException, IOException {
+            URL url = null;
+            ModuleDescriptor parent = null;
+            url = getSettings().getRelativeUrlResolver().getURL(descriptorURL, location);
+            Message.debug("Trying to load included ivy file from " + url.toString());
+            URLResource res = new URLResource(url);
+            ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser(
+                res);
+
+            parent = parser.parseDescriptor(getSettings(), url, isValidate());
+            return parent;
+        }
+
+        protected ModuleDescriptor parseOtherIvyFile(String parentOrganisation,
+                String parentModule, String parentRevision) throws ParseException {
+            ModuleId parentModuleId = new ModuleId(parentOrganisation, parentModule);
+            ModuleRevisionId parentMrid = new ModuleRevisionId(parentModuleId, parentRevision);
+
+            // try to load parent module in cache
+            File cacheFile = settings.getResolutionCacheManager().getResolvedIvyFileInCache(
+                ModuleRevisionId.newInstance(parentMrid, Ivy.getWorkingRevision()));
+            if (cacheFile.exists() && cacheFile.length() > 0) {
+                ModuleDescriptor md;
+                try {
+                    Message.debug("Trying to load included ivy file from cache");
+                    URL parentUrl = cacheFile.toURI().toURL();
+                    md = parseOtherIvyFileOnFileSystem(parentUrl.toString());
+                    return md;
+                } catch (IOException e) {
+                    // do nothing
+                    Message.error(e.getLocalizedMessage());
+                }
+            }
+
+            DependencyDescriptor dd = new DefaultDependencyDescriptor(parentMrid, true);
+            ResolveData data = IvyContext.getContext().getResolveData();
+            if (data == null) {
+                ResolveEngine engine = IvyContext.getContext().getIvy().getResolveEngine();
+                ResolveOptions options = new ResolveOptions();
+                options.setDownload(false);
+                data = new ResolveData(engine, options);
+            }
+
+            DependencyResolver resolver = getSettings().getResolver(parentMrid);
+            if (resolver == null) {
+                // TODO: Throw exception here?
+                return null;
+            } else {
+                ResolvedModuleRevision otherModule = resolver.getDependency(dd, data);
+                if (otherModule == null)
+                    throw new ParseException("Unable to find " + parentMrid.toString(), 0);
+                return otherModule.getDescriptor();
+            }
+
+        }
+
         protected void publicationsStarted(Attributes attributes) {
             state = State.PUB;
             artifactsDeclared = true;
@@ -407,28 +607,27 @@
                 addError("unknown matcher: " + matcherName);
                 return;
             }
-            getMd().addDependencyDescriptorMediator(
-                new ModuleId(org, mod), matcher, 
+            getMd().addDependencyDescriptorMediator(new ModuleId(org, mod), matcher,
                 new OverrideDependencyDescriptorMediator(branch, rev));
         }
 
-        protected void includeConfStarted(Attributes attributes) 
-                throws SAXException, IOException, ParserConfigurationException, ParseException {
+        protected void includeConfStarted(Attributes attributes) throws SAXException, IOException,
+                ParserConfigurationException, ParseException {
             URL url = settings.getRelativeUrlResolver().getURL(descriptorURL,
-                    settings.substitute(attributes.getValue("file")),
-                    settings.substitute(attributes.getValue("url")));
-            
+                settings.substitute(attributes.getValue("file")),
+                settings.substitute(attributes.getValue("url")));
+
             if (url == null) {
                 throw new SAXException("include tag must have a file or an url attribute");
             }
-            
+
             // create a new temporary parser to read the configurations from
             // the specified file.
             Parser parser = new Parser(getModuleDescriptorParser(), settings);
             parser.setInput(url);
-            parser.setMd(new DefaultModuleDescriptor(getModuleDescriptorParser(),
-                    new URLResource(url)));
-            XMLHelper.parse(url , null, parser);
+            parser.setMd(new DefaultModuleDescriptor(getModuleDescriptorParser(), new URLResource(
+                    url)));
+            XMLHelper.parse(url, null, parser);
 
             // add the configurations from this temporary parser to this module descriptor
             Configuration[] configs = parser.getModuleDescriptor().getConfigurations();
@@ -441,8 +640,7 @@
                 setDefaultConfMapping(parser.getDefaultConfMapping());
             }
             if (parser.getMd().isMappingOverride()) {
-                Message.debug("enabling mapping-override from imported configurations" 
-                        + " file");
+                Message.debug("enabling mapping-override from imported configurations" + " file");
                 getMd().setMappingOverride(true);
             }
         }
@@ -454,18 +652,16 @@
                     String visibility = settings.substitute(attributes.getValue("visibility"));
                     String ext = settings.substitute(attributes.getValue("extends"));
                     String transitiveValue = attributes.getValue("transitive");
-                    boolean transitive = (transitiveValue == null) ? true : Boolean
-                            .valueOf(attributes.getValue("transitive")).booleanValue();
+                    boolean transitive = (transitiveValue == null) ? true : Boolean.valueOf(
+                        attributes.getValue("transitive")).booleanValue();
                     String deprecated = attributes.getValue("deprecated");
-                    Configuration configuration = new Configuration(conf,
-                            Configuration.Visibility
-                                    .getVisibility(visibility == null ? "public"
-                                            : visibility), settings.substitute(attributes
-                                    .getValue("description")), ext == null ? null : ext
-                                    .split(","), transitive, deprecated);
+                    Configuration configuration = new Configuration(conf, Configuration.Visibility
+                            .getVisibility(visibility == null ? "public" : visibility), settings
+                            .substitute(attributes.getValue("description")), ext == null ? null
+                            : ext.split(","), transitive, deprecated);
                     ExtendableItemHelper.fillExtraAttributes(settings, configuration, attributes,
-                        new String[] {"name", "visibility", "extends", "transitive",
-                                "description", "deprecated"});
+                        new String[] {"name", "visibility", "extends", "transitive", "description",
+                                "deprecated"});
                     getMd().addConfiguration(configuration);
                     break;
                 case State.PUB:
@@ -511,8 +707,8 @@
             }
             boolean force = Boolean.valueOf(settings.substitute(attributes.getValue("force")))
                     .booleanValue();
-            boolean changing = Boolean.valueOf(
-                settings.substitute(attributes.getValue("changing"))).booleanValue();
+            boolean changing = Boolean
+                    .valueOf(settings.substitute(attributes.getValue("changing"))).booleanValue();
 
             String transitiveValue = settings.substitute(attributes.getValue("transitive"));
             boolean transitive = (transitiveValue == null) ? true : Boolean.valueOf(
@@ -524,14 +720,11 @@
             String rev = settings.substitute(attributes.getValue("rev"));
             String revConstraint = settings.substitute(attributes.getValue("revConstraint"));
             revConstraint = revConstraint == null ? rev : revConstraint;
-            Map extraAttributes = ExtendableItemHelper.getExtraAttributes(
-                settings, attributes, DEPENDENCY_REGULAR_ATTRIBUTES);
-            dd = new DefaultDependencyDescriptor(
-                getMd(), 
-                ModuleRevisionId.newInstance(org, name, branch, rev, extraAttributes), 
-                ModuleRevisionId.newInstance(
-                    org, name, branchConstraint, revConstraint, extraAttributes), 
-                force, changing, transitive);
+            Map extraAttributes = ExtendableItemHelper.getExtraAttributes(settings, attributes,
+                DEPENDENCY_REGULAR_ATTRIBUTES);
+            dd = new DefaultDependencyDescriptor(getMd(), ModuleRevisionId.newInstance(org, name,
+                branch, rev, extraAttributes), ModuleRevisionId.newInstance(org, name,
+                branchConstraint, revConstraint, extraAttributes), force, changing, transitive);
             getMd().addDependency(dd);
             String confs = settings.substitute(attributes.getValue("conf"));
             if (confs != null && confs.length() > 0) {
@@ -539,7 +732,7 @@
             }
         }
 
-        protected void artifactStarted(String qName, Attributes attributes) 
+        protected void artifactStarted(String qName, Attributes attributes)
                 throws MalformedURLException {
             if (state == State.PUB) {
                 // this is a published artifact
@@ -551,8 +744,8 @@
                 ext = ext != null ? ext : type;
                 String url = settings.substitute(attributes.getValue("url"));
                 artifact = new MDArtifact(getMd(), artName, type, ext, url == null ? null
-                        : new URL(url), ExtendableItemHelper.getExtraAttributes(
-                            settings, attributes, new String[] {"ext", "type", "name", "conf"}));
+                        : new URL(url), ExtendableItemHelper.getExtraAttributes(settings,
+                    attributes, new String[] {"ext", "type", "name", "conf"}));
                 String confs = settings.substitute(attributes.getValue("conf"));
                 // only add confs if they are specified. if they aren't, endElement will
                 // handle this
@@ -597,12 +790,10 @@
 
         protected void configurationStarted(Attributes attributes) {
             state = State.CONF;
-            setDefaultConfMapping(settings
-                    .substitute(attributes.getValue("defaultconfmapping")));
-            getMd()
-                    .setMappingOverride(Boolean.valueOf(
-                        settings.substitute(attributes.getValue("confmappingoverride")))
-                            .booleanValue());
+            setDefaultConfMapping(settings.substitute(attributes.getValue("defaultconfmapping")));
+            getMd().setMappingOverride(
+                Boolean.valueOf(settings.substitute(attributes.getValue("confmappingoverride")))
+                        .booleanValue());
         }
 
         protected void infoStarted(Attributes attributes) {
@@ -611,28 +802,30 @@
             String module = settings.substitute(attributes.getValue("module"));
             String revision = settings.substitute(attributes.getValue("revision"));
             String branch = settings.substitute(attributes.getValue("branch"));
-            getMd().setModuleRevisionId(ModuleRevisionId.newInstance(org, module, branch,
-                revision, ExtendableItemHelper.getExtraAttributes(settings, attributes, 
-                    new String[] {
-                        "organisation", "module", "revision", "status", "publication",
-                        "branch", "namespace", "default", "resolver"})));
+            getMd().setModuleRevisionId(
+                ModuleRevisionId.newInstance(org, module, branch, revision, ExtendableItemHelper
+                        .getExtraAttributes(settings, attributes, new String[] {"organisation",
+                                "module", "revision", "status", "publication", "branch",
+                                "namespace", "default", "resolver"})));
 
             String namespace = settings.substitute(attributes.getValue("namespace"));
             if (namespace != null) {
                 Namespace ns = settings.getNamespace(namespace);
                 if (ns == null) {
-                    Message.warn("namespace not found for " + getMd().getModuleRevisionId()
-                            + ": " + namespace);
+                    Message.warn("namespace not found for " + getMd().getModuleRevisionId() + ": "
+                            + namespace);
                 } else {
                     getMd().setNamespace(ns);
                 }
             }
 
             String status = settings.substitute(attributes.getValue("status"));
-            getMd().setStatus(status == null ? settings.getStatusManager().getDefaultStatus()
-                    : status);
-            getMd().setDefault(Boolean.valueOf(settings.substitute(attributes.getValue("default")))
-                    .booleanValue());
+            getMd().setStatus(
+                status == null ? settings.getStatusManager().getDefaultStatus() : status);
+            getMd()
+                    .setDefault(
+                        Boolean.valueOf(settings.substitute(attributes.getValue("default")))
+                                .booleanValue());
             String pubDate = settings.substitute(attributes.getValue("publication"));
             if (pubDate != null && pubDate.length() > 0) {
                 try {
@@ -662,12 +855,13 @@
                         + " as default matcher");
                 defaultMatcher = settings.getMatcher(PatternMatcher.EXACT_OR_REGEXP);
             }
-            
+
             for (int i = 0; i < attributes.getLength(); i++) {
                 if (attributes.getQName(i).startsWith("xmlns:")) {
-                    getMd().addExtraAttributeNamespace(
-                        attributes.getQName(i).substring("xmlns:".length()), 
-                        attributes.getValue(i));
+                    getMd()
+                            .addExtraAttributeNamespace(
+                                attributes.getQName(i).substring("xmlns:".length()),
+                                attributes.getValue(i));
                 }
             }
         }
@@ -678,13 +872,13 @@
             parseRule(tag, attributes);
         }
 
-        protected void addIncludeRule(String tag, Attributes attributes) 
+        protected void addIncludeRule(String tag, Attributes attributes)
                 throws MalformedURLException {
             state = State.ARTIFACT_INCLUDE;
             parseRule(tag, attributes);
         }
 
-        protected void addExcludeRule(String tag, Attributes attributes) 
+        protected void addExcludeRule(String tag, Attributes attributes)
                 throws MalformedURLException {
             state = State.ARTIFACT_EXCLUDE;
             parseRule(tag, attributes);
@@ -707,7 +901,7 @@
             ext = ext != null ? ext : type;
             if (state == State.DEP_ARTIFACT) {
                 String url = settings.substitute(attributes.getValue("url"));
-                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes, 
+                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes,
                     new String[] {"name", "type", "ext", "url", "conf"});
                 confAware = new DefaultDependencyArtifactDescriptor(dd, name, type, ext,
                         url == null ? null : new URL(url), extraAtt);
@@ -718,7 +912,7 @@
                 String module = settings.substitute(attributes.getValue("module"));
                 module = module == null ? PatternMatcher.ANY_EXPRESSION : module;
                 ArtifactId aid = new ArtifactId(new ModuleId(org, module), name, type, ext);
-                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes, 
+                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes,
                     new String[] {"org", "module", "name", "type", "ext", "matcher", "conf"});
                 confAware = new DefaultIncludeRule(aid, matcher, extraAtt);
             } else { // _state == ARTIFACT_EXCLUDE || EXCLUDE
@@ -728,7 +922,7 @@
                 String module = settings.substitute(attributes.getValue("module"));
                 module = module == null ? PatternMatcher.ANY_EXPRESSION : module;
                 ArtifactId aid = new ArtifactId(new ModuleId(org, module), name, type, ext);
-                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes, 
+                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes,
                     new String[] {"org", "module", "name", "type", "ext", "matcher", "conf"});
                 confAware = new DefaultExcludeRule(aid, matcher, extraAtt);
             }
@@ -780,20 +974,17 @@
             return matcher;
         }
 
-        
         public void characters(char[] ch, int start, int length) throws SAXException {
             if (buffer != null) {
                 buffer.append(ch, start, length);
-            }            
+            }
         }
 
-        
         public void endElement(String uri, String localName, String qName) throws SAXException {
             if (state == State.PUB && "artifact".equals(qName)
                     && artifact.getConfigurations().length == 0) {
-                String[] confs = publicationsDefaultConf == null 
-                    ? getMd().getConfigurationsNames()
-                    : publicationsDefaultConf;
+                String[] confs = publicationsDefaultConf == null ? getMd().getConfigurationsNames()
+                        : publicationsDefaultConf;
                 for (int i = 0; i < confs.length; i++) {
                     artifact.addConfiguration(confs[i].trim());
                     getMd().addArtifact(confs[i].trim(), artifact);
Index: src/java/org/apache/ivy/plugins/parser/xml/ivy.xsd
===================================================================
--- src/java/org/apache/ivy/plugins/parser/xml/ivy.xsd	(r√©vision 772962)
+++ src/java/org/apache/ivy/plugins/parser/xml/ivy.xsd	(copie de travail)
@@ -60,6 +60,15 @@
   		    <xs:element name="info">
             	<xs:complexType>
 			        <xs:sequence>
+					<xs:element name="extends" minOccurs="0" maxOccurs="unbounded">
+                                        	<xs:complexType>
+	                                                <xs:attribute name="organisation" type="xs:string" use="required"/>
+                                                        <xs:attribute name="name" type="xs:string" use="required"/>
+                                                        <xs:attribute name="revision" type="xs:string" use="required"/>
+                                                        <xs:attribute name="location" type="xs:string" />
+                                                        <xs:attribute name="extendType" type="xs:string" />
+                                                </xs:complexType>
+                                        </xs:element>
 			      		<xs:element name="license" minOccurs="0" maxOccurs="unbounded">
 			            	<xs:complexType>
 					            <xs:attribute name="name" type="xs:string" use="required"/>
@@ -141,7 +150,7 @@
 				            	</xs:complexType>
 				      		</xs:element>
 				        </xs:sequence>
-						<xs:attribute name="defaultconf" type="xs:string"/>				  
+						<xs:attribute name="defaultconf" type="xs:string"/>				  
 			      </xs:complexType>
       		</xs:element>
       		<xs:element name="dependencies" minOccurs="0">
@@ -220,7 +229,7 @@
 						            <xs:attribute name="org" type="xs:string"/>
 						            <xs:attribute name="name" type="xs:string" use="required"/>
 						            <xs:attribute name="branch" type="xs:string"/>
-						            <xs:attribute name="branchConstraint" type="xs:string"/>
+						            <xs:attribute name="branchConstraint" type="xs:string"/>
 						            <xs:attribute name="rev" type="xs:string" use="required"/>
 						            <xs:attribute name="revConstraint" type="xs:string"/>
 						            <xs:attribute name="force" type="xs:boolean"/>
